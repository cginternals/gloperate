
#pragma once


#include <string>

#include <glm/glm.hpp>

#include <gloperate/gloperate_api.h>
#include <gloperate/input/constants.h>


namespace gloperate
{


class AbstractDevice;


/**
 * @brief
 *   A base class representing Events generated by InputDevices
 */
class GLOPERATE_API InputEvent
{
public:
    enum class Type
    {
        ButtonPress
      , ButtonRelease
      , MouseMove
      , MouseButtonPress
      , MouseButtonRelease
      , MouseWheelScroll
      , SpatialAxis
    };


public:
    /**
    *  @brief
    *    Constructor
    *
    *  @param[in] type
    *    The type of the InputEvent
    *  @param[in] dispatchingDevice
    *    Pointer to the device that generated the event (must NOT be null)
    */
    InputEvent(Type type, AbstractDevice * dispatchingDevice);

    /**
    *  @brief
    *    Destructor
    */
    virtual ~InputEvent();

    /**
    *  @brief
    *    Get event type
    *
    *  @return
    *    The type of the Event
    */
    Type type() const;

    /**
    *  @brief
    *    Get device that generated the event
    *
    *  @return
    *    Pointer to the device that generated the event (never null)
    */
    AbstractDevice * device() const;

    /**
    *  @brief
    *    Get event description as string
    *
    *  @return
    *    A string describing the event
    */
    virtual std::string asString() const;


protected:
    Type             m_type;
    AbstractDevice * m_dispatchingDevice;
};


} // namespace gloperate
