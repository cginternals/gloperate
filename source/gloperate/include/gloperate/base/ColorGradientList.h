
#pragma once


#include <map>
#include <memory>

#include <gloperate/gloperate_api.h>

#include <gloperate/base/AbstractColorGradient.h>


namespace globjects
{
    class Texture;
}


namespace gloperate
{


/**
*  @brief
*    The ColorGradientList represents and manages a list of AbstractColorGradients.
*
*    The color gradients are stored and sorted by their names, requiring a lookup by name.
*
*    A texture containing all gradients can be created.
*    For a lookup in this texture it is useful to query the texture index of the current gradient by the indexOf method.
*
*  @see Color
*  @see AbstractColorGradient
*/
class GLOPERATE_API ColorGradientList
{
public:
    /**
    *  @brief
    *    Constructor
    *
    *    Construct an empty color gradient list.
    *    Add gradients with the add() method.
    */
    ColorGradientList();

    ColorGradientList(const ColorGradientList &) = delete;
    ColorGradientList & operator=(const ColorGradientList &) = delete;

    /**
    *  @brief
    *    Constructor
    *
    *    Construct a color gradient list with the given gradients
    *
    *  @param[in] gradients
    *    List of gradients
    */
    ColorGradientList(std::initializer_list<AbstractColorGradient*> gradients);

    /**
    *  @brief
    *    Constructor
    *
    *    Construct a color gradient with the given gradients
    *
    *  @param[in] gradient
    *    Head of the gradient list
    *  @param[in] args
    *    Tail of the gradient list
    */
    template <typename... Args>
    ColorGradientList(AbstractColorGradient * gradient, Args... args);

    /**
    *  @brief
    *    Destructor
    */
    virtual ~ColorGradientList();

    /**
    *  @brief
    *    Get the number of gradients
    *
    *  @return
    *    Number of gradients
    */
    size_t size() const;

    /**
    *  @brief
    *    Get map of all gradients
    *
    *  @return
    *    Map of all gradients (key is the name, value the actual gradient)
    */
    const std::map<std::string, const AbstractColorGradient *> & gradients() const;

    /**
    *  @brief
    *    Add a new gradient to the list
    *
    *  @param[in] gradient
    *    Gradient to add
    *
    *  @remarks
    *    Takes ownership of gradient
    */
    void add(std::unique_ptr<AbstractColorGradient> && gradient);

    /**
    *  @brief
    *    Get a color gradient
    *
    *  @param[in] name
    *    Name identifying the gradient
    *
    *  @return
    *    The gradient if found, else 'nullptr'
    */
    const AbstractColorGradient * at(const std::string & name) const;

    /**
    *  @brief
    *    Get a color gradient
    *
    *  @param[in] name
    *    Name identifying the gradient
    *
    *  @return
    *    The gradient if found, else 'nullptr'
    */
    AbstractColorGradient * at(const std::string & name);

    /**
    *  @brief
    *    Get index of gradient in list
    *
    *  @param[in] name
    *    Name of gradient
    *
    *  @return
    *    The index
    *
    *  @remarks
    *    The index is essential for effective lookup in the texture generated by generateTexture().
    */
    size_t indexOf(const std::string & name) const;

    /**
    *  @brief
    *    Get a vector containing pixel data for all gradients
    *
    *  @param[in] numColors
    *    Number of colors for each gradient
    *
    *  @return
    *    Vector containing pixel data.
    *
    *  @see
    *    AbstractColorGradient::pixelData()
    */
    std::vector<unsigned char> pixelData(size_t numColors) const;

    /**
    *  @brief
    *    Get a texture containing all gradients
    *
    *  @param[in] numColors
    *    Number of colors for each gradient (i.e., number of texels on x dimension)
    *
    *  @return
    *    A fully initialized texture containing all gradients
    *
    *  @remarks
    *   The texture has texel dimensions of (numColors x size()).
    */
    globjects::Texture * generateTexture(size_t numColors) const;


protected:
    std::map<std::string, std::unique_ptr<AbstractColorGradient>> m_gradients; ///< The list of gradients with their name as lookup key
};


} // namespace gloperate


#include <gloperate/base/ColorGradientList.inl>
